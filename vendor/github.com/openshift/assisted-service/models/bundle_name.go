// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BundleName The name of the bundle.
//
// swagger:model bundle-name
type BundleName string

func NewBundleName(value BundleName) *BundleName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BundleName.
func (m BundleName) Pointer() *BundleName {
	return &m
}

const (

	// BundleNameVirtualization captures enum value "virtualization"
	BundleNameVirtualization BundleName = "virtualization"

	// BundleNameOpenshiftai captures enum value "openshiftai"
	BundleNameOpenshiftai BundleName = "openshiftai"
)

// for schema
var bundleNameEnum []interface{}

func init() {
	var res []BundleName
	if err := json.Unmarshal([]byte(`["virtualization","openshiftai"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bundleNameEnum = append(bundleNameEnum, v)
	}
}

func (m BundleName) validateBundleNameEnum(path, location string, value BundleName) error {
	if err := validate.EnumCase(path, location, value, bundleNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this bundle name
func (m BundleName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBundleNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this bundle name based on context it is used
func (m BundleName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
