// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// V2EventsSubscriptionGetReader is a Reader for the V2EventsSubscriptionGet structure.
type V2EventsSubscriptionGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2EventsSubscriptionGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV2EventsSubscriptionGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewV2EventsSubscriptionGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV2EventsSubscriptionGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV2EventsSubscriptionGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewV2EventsSubscriptionGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV2EventsSubscriptionGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewV2EventsSubscriptionGetOK creates a V2EventsSubscriptionGetOK with default headers values
func NewV2EventsSubscriptionGetOK() *V2EventsSubscriptionGetOK {
	return &V2EventsSubscriptionGetOK{}
}

/* V2EventsSubscriptionGetOK describes a response with status code 200, with default header values.

Success.
*/
type V2EventsSubscriptionGetOK struct {
	Payload *models.EventSubscription
}

func (o *V2EventsSubscriptionGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetOK  %+v", 200, o.Payload)
}
func (o *V2EventsSubscriptionGetOK) GetPayload() *models.EventSubscription {
	return o.Payload
}

func (o *V2EventsSubscriptionGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2EventsSubscriptionGetUnauthorized creates a V2EventsSubscriptionGetUnauthorized with default headers values
func NewV2EventsSubscriptionGetUnauthorized() *V2EventsSubscriptionGetUnauthorized {
	return &V2EventsSubscriptionGetUnauthorized{}
}

/* V2EventsSubscriptionGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type V2EventsSubscriptionGetUnauthorized struct {
	Payload *models.InfraError
}

func (o *V2EventsSubscriptionGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetUnauthorized  %+v", 401, o.Payload)
}
func (o *V2EventsSubscriptionGetUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2EventsSubscriptionGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2EventsSubscriptionGetForbidden creates a V2EventsSubscriptionGetForbidden with default headers values
func NewV2EventsSubscriptionGetForbidden() *V2EventsSubscriptionGetForbidden {
	return &V2EventsSubscriptionGetForbidden{}
}

/* V2EventsSubscriptionGetForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type V2EventsSubscriptionGetForbidden struct {
	Payload *models.InfraError
}

func (o *V2EventsSubscriptionGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetForbidden  %+v", 403, o.Payload)
}
func (o *V2EventsSubscriptionGetForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2EventsSubscriptionGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2EventsSubscriptionGetNotFound creates a V2EventsSubscriptionGetNotFound with default headers values
func NewV2EventsSubscriptionGetNotFound() *V2EventsSubscriptionGetNotFound {
	return &V2EventsSubscriptionGetNotFound{}
}

/* V2EventsSubscriptionGetNotFound describes a response with status code 404, with default header values.

Error.
*/
type V2EventsSubscriptionGetNotFound struct {
	Payload *models.Error
}

func (o *V2EventsSubscriptionGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetNotFound  %+v", 404, o.Payload)
}
func (o *V2EventsSubscriptionGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2EventsSubscriptionGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2EventsSubscriptionGetMethodNotAllowed creates a V2EventsSubscriptionGetMethodNotAllowed with default headers values
func NewV2EventsSubscriptionGetMethodNotAllowed() *V2EventsSubscriptionGetMethodNotAllowed {
	return &V2EventsSubscriptionGetMethodNotAllowed{}
}

/* V2EventsSubscriptionGetMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type V2EventsSubscriptionGetMethodNotAllowed struct {
	Payload *models.Error
}

func (o *V2EventsSubscriptionGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *V2EventsSubscriptionGetMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2EventsSubscriptionGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2EventsSubscriptionGetInternalServerError creates a V2EventsSubscriptionGetInternalServerError with default headers values
func NewV2EventsSubscriptionGetInternalServerError() *V2EventsSubscriptionGetInternalServerError {
	return &V2EventsSubscriptionGetInternalServerError{}
}

/* V2EventsSubscriptionGetInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type V2EventsSubscriptionGetInternalServerError struct {
	Payload *models.Error
}

func (o *V2EventsSubscriptionGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/events/subscription/{subscription_id}][%d] v2EventsSubscriptionGetInternalServerError  %+v", 500, o.Payload)
}
func (o *V2EventsSubscriptionGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2EventsSubscriptionGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
