// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2EventsSubscriptionGetOKCode is the HTTP code returned for type V2EventsSubscriptionGetOK
const V2EventsSubscriptionGetOKCode int = 200

/*V2EventsSubscriptionGetOK Success.

swagger:response v2EventsSubscriptionGetOK
*/
type V2EventsSubscriptionGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetOK creates V2EventsSubscriptionGetOK with default headers values
func NewV2EventsSubscriptionGetOK() *V2EventsSubscriptionGetOK {

	return &V2EventsSubscriptionGetOK{}
}

// WithPayload adds the payload to the v2 events subscription get o k response
func (o *V2EventsSubscriptionGetOK) WithPayload(payload *models.EventSubscription) *V2EventsSubscriptionGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get o k response
func (o *V2EventsSubscriptionGetOK) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscriptionGetUnauthorizedCode is the HTTP code returned for type V2EventsSubscriptionGetUnauthorized
const V2EventsSubscriptionGetUnauthorizedCode int = 401

/*V2EventsSubscriptionGetUnauthorized Unauthorized.

swagger:response v2EventsSubscriptionGetUnauthorized
*/
type V2EventsSubscriptionGetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetUnauthorized creates V2EventsSubscriptionGetUnauthorized with default headers values
func NewV2EventsSubscriptionGetUnauthorized() *V2EventsSubscriptionGetUnauthorized {

	return &V2EventsSubscriptionGetUnauthorized{}
}

// WithPayload adds the payload to the v2 events subscription get unauthorized response
func (o *V2EventsSubscriptionGetUnauthorized) WithPayload(payload *models.InfraError) *V2EventsSubscriptionGetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get unauthorized response
func (o *V2EventsSubscriptionGetUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscriptionGetForbiddenCode is the HTTP code returned for type V2EventsSubscriptionGetForbidden
const V2EventsSubscriptionGetForbiddenCode int = 403

/*V2EventsSubscriptionGetForbidden Forbidden.

swagger:response v2EventsSubscriptionGetForbidden
*/
type V2EventsSubscriptionGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetForbidden creates V2EventsSubscriptionGetForbidden with default headers values
func NewV2EventsSubscriptionGetForbidden() *V2EventsSubscriptionGetForbidden {

	return &V2EventsSubscriptionGetForbidden{}
}

// WithPayload adds the payload to the v2 events subscription get forbidden response
func (o *V2EventsSubscriptionGetForbidden) WithPayload(payload *models.InfraError) *V2EventsSubscriptionGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get forbidden response
func (o *V2EventsSubscriptionGetForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscriptionGetNotFoundCode is the HTTP code returned for type V2EventsSubscriptionGetNotFound
const V2EventsSubscriptionGetNotFoundCode int = 404

/*V2EventsSubscriptionGetNotFound Error.

swagger:response v2EventsSubscriptionGetNotFound
*/
type V2EventsSubscriptionGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetNotFound creates V2EventsSubscriptionGetNotFound with default headers values
func NewV2EventsSubscriptionGetNotFound() *V2EventsSubscriptionGetNotFound {

	return &V2EventsSubscriptionGetNotFound{}
}

// WithPayload adds the payload to the v2 events subscription get not found response
func (o *V2EventsSubscriptionGetNotFound) WithPayload(payload *models.Error) *V2EventsSubscriptionGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get not found response
func (o *V2EventsSubscriptionGetNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscriptionGetMethodNotAllowedCode is the HTTP code returned for type V2EventsSubscriptionGetMethodNotAllowed
const V2EventsSubscriptionGetMethodNotAllowedCode int = 405

/*V2EventsSubscriptionGetMethodNotAllowed Method Not Allowed.

swagger:response v2EventsSubscriptionGetMethodNotAllowed
*/
type V2EventsSubscriptionGetMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetMethodNotAllowed creates V2EventsSubscriptionGetMethodNotAllowed with default headers values
func NewV2EventsSubscriptionGetMethodNotAllowed() *V2EventsSubscriptionGetMethodNotAllowed {

	return &V2EventsSubscriptionGetMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 events subscription get method not allowed response
func (o *V2EventsSubscriptionGetMethodNotAllowed) WithPayload(payload *models.Error) *V2EventsSubscriptionGetMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get method not allowed response
func (o *V2EventsSubscriptionGetMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscriptionGetInternalServerErrorCode is the HTTP code returned for type V2EventsSubscriptionGetInternalServerError
const V2EventsSubscriptionGetInternalServerErrorCode int = 500

/*V2EventsSubscriptionGetInternalServerError Error.

swagger:response v2EventsSubscriptionGetInternalServerError
*/
type V2EventsSubscriptionGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscriptionGetInternalServerError creates V2EventsSubscriptionGetInternalServerError with default headers values
func NewV2EventsSubscriptionGetInternalServerError() *V2EventsSubscriptionGetInternalServerError {

	return &V2EventsSubscriptionGetInternalServerError{}
}

// WithPayload adds the payload to the v2 events subscription get internal server error response
func (o *V2EventsSubscriptionGetInternalServerError) WithPayload(payload *models.Error) *V2EventsSubscriptionGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscription get internal server error response
func (o *V2EventsSubscriptionGetInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscriptionGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
