// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2EventsSubscribeCreatedCode is the HTTP code returned for type V2EventsSubscribeCreated
const V2EventsSubscribeCreatedCode int = 201

/*V2EventsSubscribeCreated Success.

swagger:response v2EventsSubscribeCreated
*/
type V2EventsSubscribeCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewV2EventsSubscribeCreated creates V2EventsSubscribeCreated with default headers values
func NewV2EventsSubscribeCreated() *V2EventsSubscribeCreated {

	return &V2EventsSubscribeCreated{}
}

// WithPayload adds the payload to the v2 events subscribe created response
func (o *V2EventsSubscribeCreated) WithPayload(payload *models.EventSubscription) *V2EventsSubscribeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe created response
func (o *V2EventsSubscribeCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscribeUnauthorizedCode is the HTTP code returned for type V2EventsSubscribeUnauthorized
const V2EventsSubscribeUnauthorizedCode int = 401

/*V2EventsSubscribeUnauthorized Unauthorized.

swagger:response v2EventsSubscribeUnauthorized
*/
type V2EventsSubscribeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2EventsSubscribeUnauthorized creates V2EventsSubscribeUnauthorized with default headers values
func NewV2EventsSubscribeUnauthorized() *V2EventsSubscribeUnauthorized {

	return &V2EventsSubscribeUnauthorized{}
}

// WithPayload adds the payload to the v2 events subscribe unauthorized response
func (o *V2EventsSubscribeUnauthorized) WithPayload(payload *models.InfraError) *V2EventsSubscribeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe unauthorized response
func (o *V2EventsSubscribeUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscribeForbiddenCode is the HTTP code returned for type V2EventsSubscribeForbidden
const V2EventsSubscribeForbiddenCode int = 403

/*V2EventsSubscribeForbidden Forbidden.

swagger:response v2EventsSubscribeForbidden
*/
type V2EventsSubscribeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2EventsSubscribeForbidden creates V2EventsSubscribeForbidden with default headers values
func NewV2EventsSubscribeForbidden() *V2EventsSubscribeForbidden {

	return &V2EventsSubscribeForbidden{}
}

// WithPayload adds the payload to the v2 events subscribe forbidden response
func (o *V2EventsSubscribeForbidden) WithPayload(payload *models.InfraError) *V2EventsSubscribeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe forbidden response
func (o *V2EventsSubscribeForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscribeNotFoundCode is the HTTP code returned for type V2EventsSubscribeNotFound
const V2EventsSubscribeNotFoundCode int = 404

/*V2EventsSubscribeNotFound Error.

swagger:response v2EventsSubscribeNotFound
*/
type V2EventsSubscribeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscribeNotFound creates V2EventsSubscribeNotFound with default headers values
func NewV2EventsSubscribeNotFound() *V2EventsSubscribeNotFound {

	return &V2EventsSubscribeNotFound{}
}

// WithPayload adds the payload to the v2 events subscribe not found response
func (o *V2EventsSubscribeNotFound) WithPayload(payload *models.Error) *V2EventsSubscribeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe not found response
func (o *V2EventsSubscribeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscribeMethodNotAllowedCode is the HTTP code returned for type V2EventsSubscribeMethodNotAllowed
const V2EventsSubscribeMethodNotAllowedCode int = 405

/*V2EventsSubscribeMethodNotAllowed Method Not Allowed.

swagger:response v2EventsSubscribeMethodNotAllowed
*/
type V2EventsSubscribeMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscribeMethodNotAllowed creates V2EventsSubscribeMethodNotAllowed with default headers values
func NewV2EventsSubscribeMethodNotAllowed() *V2EventsSubscribeMethodNotAllowed {

	return &V2EventsSubscribeMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 events subscribe method not allowed response
func (o *V2EventsSubscribeMethodNotAllowed) WithPayload(payload *models.Error) *V2EventsSubscribeMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe method not allowed response
func (o *V2EventsSubscribeMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2EventsSubscribeInternalServerErrorCode is the HTTP code returned for type V2EventsSubscribeInternalServerError
const V2EventsSubscribeInternalServerErrorCode int = 500

/*V2EventsSubscribeInternalServerError Error.

swagger:response v2EventsSubscribeInternalServerError
*/
type V2EventsSubscribeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2EventsSubscribeInternalServerError creates V2EventsSubscribeInternalServerError with default headers values
func NewV2EventsSubscribeInternalServerError() *V2EventsSubscribeInternalServerError {

	return &V2EventsSubscribeInternalServerError{}
}

// WithPayload adds the payload to the v2 events subscribe internal server error response
func (o *V2EventsSubscribeInternalServerError) WithPayload(payload *models.Error) *V2EventsSubscribeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 events subscribe internal server error response
func (o *V2EventsSubscribeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2EventsSubscribeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
